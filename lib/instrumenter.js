// Generated by CoffeeScript 1.4.0
(function() {
  var Instrumenter, coffee, crypto, escodegen, estraverse, generateTrackerVar, istanbul,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  coffee = require('CoffeeScriptRedux');

  istanbul = require('istanbul');

  crypto = require('crypto');

  escodegen = require('escodegen');

  estraverse = require('estraverse');

  generateTrackerVar = function(filename, omitSuffix) {
    var hash, suffix;
    if (omitSuffix) {
      return '__cov_';
    }
    hash = crypto.createHash('md5');
    hash.update(filename);
    suffix = hash.digest('base64');
    suffix = suffix.replace(/\=/g, '').replace(/\+/g, '_').replace(/\//g, '$');
    return '__cov_' + suffix;
  };

  Instrumenter = (function(_super) {

    __extends(Instrumenter, _super);

    function Instrumenter(opt) {
      istanbul.Instrumenter.call(this, opt);
    }

    Instrumenter.prototype.instrumentSync = function(code, filename) {
      var codegenOptions, csast, program;
      filename = filename || Date.now() + '.js';
      this.coverState = {
        path: filename,
        s: {},
        b: {},
        f: {},
        fnMap: {},
        statementMap: {},
        branchMap: {}
      };
      this.currentState = {
        trackerVar: generateTrackerVar(filename, this.omitTrackerSuffix),
        func: 0,
        branch: 0,
        variable: 0,
        statement: 0
      };
      if (typeof code !== 'string') {
        throw new Error('Code must be string');
      }
      if (code[0] === '#') {
        code = '//' + code;
      }
      csast = coffee.parse(code, {
        optimise: false,
        raw: true
      });
      program = coffee.compile(csast, {
        bare: true
      });
      this.attachLocation(program);
      this.walker.startWalk(program);
      codegenOptions = this.opts.codeGenerationOptions || {
        format: {
          compact: !this.opts.noCompact
        }
      };
      return this.getPreamble(code) + '\n' + escodegen.generate(program, codegenOptions) + '\n';
    };

    Instrumenter.prototype.attachLocation = function(tree) {
      return estraverse.traverse(tree, {
        leave: function(node, parent) {
          var lines, value, _ref;
          if ((node.column != null) && (node.line != null) && ((node.raw != null) || (node.value != null))) {
            if (node.raw != null) {
              value = node.raw;
            } else if (typeof node.value === 'string') {
              value = '"' + node.value + '"';
            } else {
              value = '' + node.value;
            }
            node.loc = {
              start: {
                line: node.line,
                column: node.column
              },
              end: {
                line: node.line,
                column: 0
              }
            };
            node.loc.end.column = node.loc.start.column + value.length;
            lines = value.split(/(?:\n|\r|[\r\n])/);
            if (lines.length !== 0 && lines.length !== 1) {
              node.loc.end.line += lines.length - 1;
              return node.loc.end.column = lines[lines.length - 1].length;
            }
          } else {
            try {
              switch (node.type) {
                case 'BlockStatement':
                  return node.loc = {
                    start: node.body[0].loc.start,
                    end: node.body[node.body.length - 1].loc.end
                  };
                case 'VariableDeclarator':
                  if ((node != null ? (_ref = node.init) != null ? _ref.loc : void 0 : void 0) != null) {
                    return node.loc = {
                      start: node.id.loc.start,
                      end: node.init.loc.end
                    };
                  } else {
                    return node.loc = node.id.loc;
                  }
                  break;
                case 'ExpressionStatement':
                  return node.loc = node.expression.loc;
                case 'ReturnStatement':
                  if (node.argument != null) {
                    return node.loc = node.argument.loc;
                  }
                  break;
                case 'VariableDeclaration':
                  return node.loc = {
                    start: node.declarations[0].loc.start,
                    end: node.declarations[node.declarations.length - 1].loc.end
                  };
                default:
                  throw 'out';
              }
            } catch (e) {
              return node.loc = {
                start: {
                  line: 0,
                  column: 0
                },
                end: {
                  line: 0,
                  column: 0
                }
              };
            }
          }
        }
      });
    };

    return Instrumenter;

  })(istanbul.Instrumenter);

  module.exports = Instrumenter;

}).call(this);
